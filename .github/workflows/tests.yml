name: "Tests"

on: [push, pull_request]

jobs:
    run-test-windows:
        name: PHP ${{ matrix.php-versions }} (${{ matrix.ts }}) test on ${{ matrix.operating-system }}
        runs-on: ${{ matrix.operating-system }}
        env:
            extensions: mbstring, intl, json, psr, phalcon4, mysql, pgsql, xdebug
            key: cache-v2.0~19.03.2020
        strategy:
          fail-fast: false
          matrix:
            operating-system: [windows-2016]
            php-versions: ['7.2']
#            php-versions: ['7.2', '7.3']
            ts: [ts]
#            ts: [ts, nts]
            include:
              - php-versions: '7.2'
                vc_num: '15'
                arch: x64
                build_type: Win32
#              - php-versions: '7.3'
#                vc_num: '15'
#                arch: x64
#                build_type: Win32uses: shivammathur/setup-php@v2
        steps:
          - name: Disable git autocrlf
            run: git config --global core.autocrlf false

          - name: Git checkout
            uses: actions/checkout@v2-beta
            with:
              fetch-depth: 1

#          - name: Setup cache environment
#            id: cache-env
#            uses: shivammathur/cache-extensions@v1
#            with:
#                php-version: ${{ matrix.php-versions }}
#                extensions: ${{ env.extensions }}
#                key: ${{ env.key }}

#          - name: Cache extensions
#            uses: actions/cache@v1
#            with:
#                path: ${{ steps.cache-env.outputs.dir }}
#                key: ${{ steps.cache-env.outputs.key }}
#                restore-keys: ${{ steps.cache-env.outputs.key }}

          - name: Setup PHP
            uses: shivammathur/setup-php@v2
            with:
              php-version: ${{ matrix.php-versions }}
              extensions: ${{ env.extensions }}
              coverage: xdebug #optional
            env:
              PHPTS: ${{ matrix.ts }}

          - name: Install Phalcon
            run: |
              pecl channel-update pecl.php.net
              pecl install phalcon

#          - name: Set Up Environment Variables
#            run: |
#              echo "::set-env name=PHP_SDK_VERSION::2.2.0"
#              echo "::set-env name=PHP_DEVPACK::C:\tools\php-devpack"
#              echo "::set-env name=PHP_SDK_PATH::C:\tools\php-sdk"
#              echo "::set-env name=PHP_PECL_PATH::C:\tools\pecl"
#              # FIXME: phpversion() return 7.4.3 but windows.php.net has only 7.4.4
#              # We should parse the following file to get the correct version:
#              #   https://windows.php.net/downloads/releases/sha256sum.txt
#              If ("${{ matrix.php-versions }}" -eq "7.4") {
#                echo "::set-env name=PHP_VERSION::7.4.4"
#              } Else {
#                echo "::set-env name=PHP_VERSION::$(php -r 'echo phpversion();')"
#              }
#              echo "::set-env name=PHP_MINOR::${{ matrix.php-versions }}"
#              echo "::set-env name=TEST_PHP_EXECUTABLE::${env:PHPROOT}\php.exe"
#              echo "::set-env name=VC_VERSION::${{ matrix.vc_num }}"
#              echo "::set-env name=PHP_ARCH::${{ matrix.arch }}"
#              echo "::set-env name=PACKAGE_PREFIX::phalcon"
#              echo "::set-env name=EXTENSION_NAME::phalcon"
#              echo "::set-env name=EXTENSION_FILE::php_phalcon.dll"
#              echo "::set-env name=PHALCON_VERSION::4.0.5"
#              echo "::set-env name=PHPTS::${{ matrix.ts }}"
#              If ("${{ matrix.ts }}" -eq "nts") {
#                echo "::set-env name=BUILD_TYPE::nts-${{ matrix.build_type }}"
#              } Else {
#                echo "::set-env name=BUILD_TYPE::${{ matrix.build_type }}"
#              }

          - name: Setup Composer Token
            run: |
              # To increase the Composer rate limit we're use GitHub authentication
              if ("${{ secrets.COMPOSER_TOKEN }}" -ne "") {
                  composer config github-oauth.github.com ${{ secrets.COMPOSER_TOKEN }}
              }

#          - name: Setup Common Environment
#            run: |
#              Import-Module .\.ci\win-ci-tools.psm1
#              SetupCommonEnvironment

          - name: Get Composer Cache Directory
            id: composer-cache
            run: |
              echo "::set-output name=dir::$(composer config cache-files-dir)"

          - name: Setup Cache
            uses: actions/cache@v1
            with:
              path: ${{ steps.composer-cache.outputs.dir }}
              key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.json') }}
              restore-keys: |
                ${{ runner.os }}-composer-

#          - name: Install PHP SDK Binary Tools
#            run: |
#              Import-Module .\.ci\win-ci-tools.psm1
#              InstallPhpSdk
#
#          - name: Install PHP Dev pack
#            run: |
#              Import-Module .\.ci\win-ci-tools.psm1
#              InstallPhpDevPack
#
#          - name: Getting Details About Installed PHP
#            run: |
#              Import-Module .\.ci\win-ci-tools.psm1
#              Get-Php "${env:PHPROOT}"
#
#          - name: Install System Dependencies
#            run: choco install -y --cache-location=C:\Downloads\Choco re2c
#
#          - name: Initialize Release Variables
#            run: |
#              Import-Module .\.ci\win-ci-tools.psm1
#              InitializeReleaseVars

#          - name: Unpack package
#            run: |
#              Import-Module .\.ci\win-ci-tools.psm1
#              Expand-Item7zip "phalcon-pecl\phalcon-pecl.tgz" "${env:Temp}"
#              Expand-Item7zip "${env:Temp}\phalcon-pecl.tar" "${env:PHP_PECL_PATH}\phalcon"
#
#          - name: Phpize
#            shell: cmd
#            run: |
#              set PATH=%PATH%;%PHP_DEVPACK%
#              cd /d %PHP_PECL_PATH%\phalcon\phalcon-%PHALCON_VERSION%
#              phpize
#
#          - name: Configure
#            shell: cmd
#            run: |
#              set PATH=%PATH%;%PHP_DEVPACK%
#              cd /d %PHP_PECL_PATH%\phalcon\phalcon-%PHALCON_VERSION%
#              configure --enable-phalcon
#
#          - name: Nmake
#            shell: cmd
#            run: |
#              set PATH=%PATH%;%PHP_DEVPACK%
#              cd /d %PHP_PECL_PATH%\phalcon\phalcon-%PHALCON_VERSION%
#              nmake
#
#          - name: Inspecting Phalcon Extension DLL File
#            run: Get-PhpExtension "${env:RELEASE_DLL_PATH}"
#
#          - uses: actions/upload-artifact@v1
#            with:
#              name: ${{ env.RELEASE_ZIPBALL }}
#              path: ${{ env.RELEASE_DLL_PATH }}

#          - name: Enable Phalcon
#            run: |
#              Import-Module .\.ci\win-ci-tools.psm1
#              EnablePhalconExtension

          - name: Verify install
            run: php --ri phalcon

          - name: Install Composer dependencies
            run: |
              composer install --prefer-dist --no-suggest
              composer require --dev phpstan/phpstan

          - name: Initialise DataBase
            env:
                MYSQL_DB_PASSWORD: 'root'
                MYSQL_DB_PORT: ${{ job.services.mysql.ports['3306'] }}
                POSTGRES_DB_PORT: ${{ job.services.postgres.ports['5432'] }}
            run: bash tests/_ci/setup_dbs_github.sh

          - name: Symbolic link Phalcon devtools
            run: bash ./.ci/link_devtools.sh

          - name: Init Webtools and add ports in database setup
            env:
                MYSQL_DB_PASSWORD: 'root'
                MYSQL_DB_PORT: ${{ job.services.mysql.ports['3306'] }}
                POSTGRES_DB_PORT: ${{ job.services.postgres.ports['5432'] }}
            run: bash ./.ci/serve-webtools.sh

          - name: Setup tests
            run: |
              cp tests/.env.test .env
              bash ./.ci/github_set_env.sh
              mkdir .phalcon
              vendor/bin/codecept build
              vendor/bin/phpcs

          - name: Run test suites
            env:
                MYSQL_DB_PASSWORD: 'root'
                MYSQL_DB_PORT: ${{ job.services.mysql.ports['3306'] }}
                POSTGRES_DB_PORT: ${{ job.services.postgres.ports['5432'] }}
            if: success()
            run: |
              vendor/bin/codecept run --ext DotReporter acceptance -g mysql --env mysql
              vendor/bin/codecept run --ext DotReporter acceptance -g pgsql --env pgsql
              vendor/bin/codecept run --ext DotReporter acceptance -g common --coverage-xml=coverage-common-${{ matrix.php-versions }}.xml
              vendor/bin/codecept run --ext DotReporter unit --coverage-xml=coverage-unit-${{ matrix.php-versions }}.xml
              vendor/bin/codecept run --ext DotReporter functional --coverage-xml=coverage-functional-${{ matrix.php-versions }}.xml
              vendor/bin/codecept run --ext DotReporter console --coverage-xml=coverage-console-${{ matrix.php-versions }}.xml

          - name: If fail - Check Config file
            env:
                MYSQL_DB_PORT: ${{ job.services.mysql.ports['3306'] }}
                POSTGRES_DB_PORT: ${{ job.services.postgres.ports['5432'] }}
            if: failure()
            run: |
                cat webtools/app/config/config.php
                cat webtools/app/config/services.php
                echo "<?php print_r(include('webtools/app/config/config.php')) ?>" > content_config.php
                php content_config.php
                php tests/debug.php

          - uses: actions/upload-artifact@v1
            if: failure()
            with:
                name: Codeception Logs
                path: tests/_output
